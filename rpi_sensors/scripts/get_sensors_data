#!/usr/bin/env python3

from robonomics_lighthouse.msg import Ask, Result
from robonomics_lighthouse.signer import askhash
from tempfile import NamedTemporaryFile 
from std_msgs.msg import String
import rospy, ipfsapi, os
import serial
import rosbag
from web3 import Web3, HTTPProvider

def callback(msg):
    if msg.model == "QmSVvKvZf5nw3uQoHpFe7jq3YonPc7Bd8gAKTDaDuMyBQW":
        send_res = rospy.Publisher('/liability/infochan/signing/result', Result, queue_size=10)

        with NamedTemporaryFile(dir="/storage/rosbag/", delete=False) as tmpfile:
            ipfs = ipfsapi.connect()

            result_file = tmpfile.name
            rospy.loginfo('Start recording to %s...', result_file)

            recorder = rosbag.Bag(result_file, 'w')

            ser = serial.Serial('/dev/ttyUSB0')
            line = ser.readline().decode('utf-8', "ignore")

            data = String()
            data.data = line
            recorder.write('/sensor_data', data)

            # salt is generated on server side and included here to prevent wrong results
            salt = String()
            salt.data = msg.objective
            recorder.write('/sensor_data_salt', salt)

            recorder.close()

            ipfs_response = ipfs.add(result_file)
            try:
                result = ipfs_response['Hash']
            except TypeError:
                rospy.logwarn('IPFS add proceeding error: %s', ipfs_response[1]['Message'])
                result = ipfs_response[0]['Hash']


            web3 = Web3(HTTPProvider("http://127.0.0.1:8545"))

            msignature = msg.signature
            msg.signature = b""

            res = Result()
            res.liability = web3.eth.account.recoverHash(askhash(msg), signature=msignature)
            res.result = result
            rospy.loginfo(result)
            rospy.loginfo(res.liability)
            send_res.publish(res)


if __name__ == '__main__':
    rospy.init_node('rpi_sensors')
    rospy.Subscriber('/liability/infochan/incoming/ask', Ask, callback)
    rospy.spin()
